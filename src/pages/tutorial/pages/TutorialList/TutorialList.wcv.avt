<h1>List</h1>
<p>Now that we can add item, we must display them. To do that, we need to new component (multiple files) named : <span
        class="cn">TodoList</span> and <span class="cn">TodoListItem</span>. You should know how to create them from the
    previous section so do it.</p>

<p>Now we will start with the item. Open the file <span class="cn">TodoListItem.wcv.avt</span> and add the following
    content : </p>
<av-code language="html" filename="TodoListItem.wcv.avt">
    &lt;span&gt;-&lt;/span&gt;
    &lt;div class="title"&gt;{{todo_name}}&lt;/div&gt;
    &lt;div class="status" @click="updateStatus"&gt;{{todo_status}}&lt;/div&gt;
    &lt;button @click="deleteTodo"&gt;delete&lt;/button&gt;
</av-code>

<p>The class <span class="cn">title</span> will display the <span class="cn">name</span> of the todo and the class <span
        class="cn">status</span> will display the <span class="cn">status</span> of the todo. When the user click on the
    status, the function <span class="cn">updateStatus</span> will be fired and if the user click on the button delete,
    the function <span class="cn">deleteTodo</span> will be fired. Import the missing methods and property. The actual
    document must be : </p>
<av-code language="typescript" filename="TodoListItem.wcl.avt">
    export class TodoListItem extends Aventus.WebComponent implements Aventus.DefaultComponent {
    &nbsp;
    \t//#region static
    &nbsp;
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region props
    \t@Property()
    \tpublic todo_name: string;
    \t@Property()
    \tpublic todo_status: string;
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region variables
    &nbsp;
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region constructor
    &nbsp;
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region methods
    &nbsp;
    \t/**
    \t *
    \t */
    \tprotected updateStatus() {
    \t\tthrow new Error("Method not implemented.");
    \t}
    \t/**
    \t *
    \t */
    \tprotected deleteTodo() {
    \t\tthrow new Error("Method not implemented.");
    \t}
    \t//#endregion
    &nbsp;
    }
</av-code>

<p>Now we know that the component <span class="cn">TodoListItem</span> must be initialized with a <span
        class="cn">Todo</span> item. So you can add the following function inside the <span class="cn">methods</span>
    region.</p>

<av-code language="typescript" filename="TodoListItem.wcl.avt">
    export class TodoListItem extends Aventus.WebComponent implements Aventus.DefaultComponent {
    &nbsp;
    \t...
    &nbsp;
    \t//#region variables
    \tprivate todo: Todo;
    \t//#endregion
    &nbsp;
    \t...
    &nbsp;
    \t// refresh properties value
    \tpublic updateProps(todo: Todo) {
    \t\tthis.todo_name = this.todo.name;
    \t\tthis.todo_status = TodoStatus[this.todo.status];
    \t}
    &nbsp;
    \t// entry point to init the component
    \tpublic init(todo: Todo) {
    \t\tthis.todo = todo;
    \t\tthis.updateProps(todo);
    \t}
    &nbsp;
    \t...
    &nbsp;
    }
</av-code>

<p>Now we are able to init a <span class="cn">TodoListItem</span> we can create the <span class="cn">TodoList</span>. We
    are going to create two lists : one vertical and the other horizontal. Open the file <span
        class="cn">TodoList.wcl.avt</span> and set your cursor inside the region <span class="cn">props</span>, right
    click and select the options <span class="cn">Aventus : Create property</span></p>

<av-img src="/img/tuto/list/create_prop.png"></av-img>

<p>Named the property <span class="cn">design</span>, choose the type <span class="cn">Custom</span> and we don't need a
    callback. The type for this property is <span class="cn">"vertical" | "horizontal"</span> and the initial value is
    <span class="cn">"horizontal"</span>. The current file content must be :
</p>

<av-code language="typescript" filename="TodoList.wcl.avt">
    export class TodoList extends Aventus.WebComponent implements Aventus.DefaultComponent {
    &nbsp;
    \t//#region static
    &nbsp;
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region props
    \t@Property()
    \tpublic design:"vertical" | "horizontal" = "horizontal";
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region variables
    &nbsp;
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region constructor
    &nbsp;
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region methods
    &nbsp;
    \t//#endregion
    &nbsp;
    }
</av-code>

<p>Now open the file <span class="cn">TodoList.wcv.avt</span> and replace the content by </p>
<av-code filename="TodoList.wcv.avt" language="html">
    &lt;h2&gt;List {{design}}&lt;/h2&gt;
    &lt;div class="container" @element="container"&gt;&lt;/div&gt;
</av-code>
<p>The container is where we will add the TodoListItem, but we didn't register this variable inside the logical part. As
    you did before, you can correct error inside the <span class="cn">TodoList.wcl.avt</span> by pressing <span
        class="cn">ctrl + .</span> and choose the appropriate correction.</p>

<p>Now we must listen to the todo item creation so we need to subscribe to the manager. We can create a new method named
    <span class="cn">subscribeToRAM</span> and start typing :
</p>

<av-code language="typescript" filename="TodoList.wcl.avt">
    export class TodoList extends Aventus.WebComponent implements Aventus.DefaultComponent {
    &nbsp;
    \t...
    &nbsp;
    \tprivate subscribeToRAM() {
    \t\tTodoRAM.getInstance().onCreated
    \t}
    &nbsp;
    \t...
    &nbsp;
    }
</av-code>
<p>If you set the cursor over the <span class="cn">onCreated</span> method you could notice the following.</p>

<av-img src="/img/tuto/list/oncreate.png"></av-img>

<p>This function take as parameter a callback function with a parameter <span class="cn">item:
        Aventus.RamItem&lt;Todo&gt;</span>. So you can create a function named <span class="cn">addTodoIntoList</span>
    that will create a new <span class="cn">TodoListItem</span> and add it into the <span class="cn">container</span>.
</p>

<av-code language="typescript" filename="TodoList.wcl.avt">
    export class TodoList extends Aventus.WebComponent implements Aventus.DefaultComponent {
    &nbsp;
    \t...
    &nbsp;
    \tprivate addTodoIntoList(todo: Aventus.RamItem&lt;Todo&gt;) {
    \t\tlet item = new TodoListItem();
    \t\titem.init(todo);
    \t\tthis.container.appendChild(item);
    \t}
    \tprivate subscribeToRAM() {
    \t\tTodoRAM.getInstance().onCreated(this.addTodoIntoList);
    \t}
    &nbsp;
    \t...
    &nbsp;
    }
</av-code>
<p>Finally we must call the subscribeToRAM. There are 2 options : </p>
<ul>
    <li><span class="cn">constructor</span> : override the constructor to call subscribeToRAM when the element is
        created</li>
    <li><span class="cn">postCreation</span> : override the function postCreation to call subscribeToRAM when the
        element is appended to the DOM.</li>
</ul>
<p>We will take the second option. Set your cursor at the end of the <span class="cn">methods</span> region and type
    <span class="cn">pos</span>. The autocompletion must suggest you something like that :
</p>
<av-img src="/img/tuto/list/post_creation.png"></av-img>

<p>Select the <span class="cn">postCreation</span>, the method will be written by Aventus and you can complete the
    function body with</p>

<av-code language="typescript" filename="TodoList.wcl.avt">
    export class TodoList extends Aventus.WebComponent implements Aventus.DefaultComponent {
    &nbsp;
    \t...
    &nbsp;
    \tprotected override postCreation(): void {
    \t\tthis.subscribeToRAM();
    \t}
    &nbsp;
    \t...
    &nbsp;
    }
</av-code>

<p>There is one last error. By passing the function <span class="cn">addTodoIntoList</span> as parameter, we are losing
    the actual <span class="cn"><a href="https://developer.mozilla.org/en-US/docs/Glossary/Scope"
            target="_blank">scope</a></span> that must be <span class="cn">this == TodoList instance</span>. To correct
    the problem, we need to use the function <span class="cn"><a
            href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind"
            target="_blank">bind</a></span>. The trick consists in replacing the function by the function binded inside
    the <span class="cn">constructor</span></p>

<av-code language="typescript" filename="TodoList.wcl.avt">
    export class TodoList extends Aventus.WebComponent implements Aventus.DefaultComponent {
    &nbsp;
    \t...
    &nbsp;
    \t//#region constructor
    \tconstructor() {
    \t\tsuper();
    \t\tthis.addTodoIntoList = this.addTodoIntoList.bind(this);
    \t}
    \t//#endregion
    &nbsp;
    \t...
    &nbsp;
    }
</av-code>

<p>The final file</p>

<av-code language="typescript" filename="TodoList.wcl.avt">
    import { TodoListItem } from "../TodoListItem/TodoListItem.wcl.avt";
    import { Todo } from "../../data/Todo.data.avt";
    import { TodoRAM } from "../../ram/Todo.ram.avt";

    export class TodoList extends Aventus.WebComponent implements Aventus.DefaultComponent {
    &nbsp;
    \t//#region static
    &nbsp;
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region props
    \t@Property()
    \tpublic design: "vertical" | "horizontal" = "horizontal";
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region variables
    \t@ViewElement()
    \tprotected container: HTMLDivElement;
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region constructor
    \tconstructor() {
    \t\tsuper();
    \t\tthis.addTodoIntoList = this.addTodoIntoList.bind(this);
    }
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region methods
    \tprivate addTodoIntoList(todo: Aventus.RamItem&lt;Todo&gt;) {
    \t\tlet item = new TodoListItem();
    \t\titem.init(todo);
    \t\tthis.container.appendChild(item);
    \t}
    &nbsp;
    \tprivate subscribeToRAM() {
    \t\tTodoRAM.getInstance().onCreated(this.addTodoIntoList);
    \t}
    &nbsp;
    \tprotected override postCreation(): void {
    \t\tthis.subscribeToRAM();
    \t}
    \t//#endregion
    &nbsp;
    }
</av-code>

<p>We can change the <span class="cn">App.wc.avt</span> by add the two list inside the <span
        class="cn">&lt;template&gt;</span></p>

<av-code language="html" filename="App.wc.avt">
    &lt;template&gt;
    \t&lt;h1&gt;Todo&lt;/h1&gt;
    \t&lt;div class="container"&gt;
    \t\t&lt;td-todo-list&gt;&lt;/td-todo-list&gt;
    \t\t&lt;td-todo-list design="vertical"&gt;&lt;/td-todo-list&gt;
    \t\t&lt;td-create-form&gt;&lt;/td-create-form&gt;
    \t&lt;/div&gt;
    &lt;/template&gt;
</av-code>

<p>If you check your browser, and try to insert todo, it should work.</p>

<av-img src="/img/tuto/list/preview.png"></av-img>

<p>If you press on <span class="cn">Waiting</span> or <span class="cn">Delete</span> the console will print an error
    message because we didn't implement function <span class="cn">updateStatus</span> and <span
        class="cn">deleteTodo</span>. Open the file <span class="cn">TodoListItem.wcl.avt</span>. First of all we must
    change the type <span class="cn">Todo</span> by <span class="cn">Aventus.RamItem&lt;Todo&gt;</span> because the item
    is an item from the RAM. We always have to modify data through the RAM to keep the component sync. Then you can writte the following content and read the comment to understand what the line
    is doing.</p>

<av-code language="typescript" filename="TodoListItem.wcl.avt">
    import { Todo, TodoStatus } from "../../data/Todo.data.avt";
    &nbsp;
    export class TodoListItem extends Aventus.WebComponent implements Aventus.DefaultComponent {
    &nbsp;
    \t//#region static
    &nbsp;
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region props
    \t@Property()
    \tpublic todo_name: string;
    \t@Property()
    \tpublic todo_status: string;
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region variables
    \tprivate todo: Aventus.RamItem&lt;Todo&gt;;
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region constructor
    \tconstructor() {
    \t\tsuper();
    \t\t// force the scope to be this class
    \t\tthis.updateProps = this.updateProps.bind(this);
    \t\tthis.destroy = this.destroy.bind(this);
    \t}
    \t//#endregion
    &nbsp;
    &nbsp;
    \t//#region methods
    &nbsp;
    \t// refresh properties value
    \tpublic updateProps(todo: Aventus.RamItem&lt;Todo&gt;) {
    \t\tthis.todo_name = this.todo.name;
    \t\tthis.todo_status = TodoStatus[this.todo.status];
    \t}
    &nbsp;
    \tprivate destroy() {
    \t\t// remove update and delete listeners
    \t\tthis.todo.offUpdate(this.updateProps);
    \t\tthis.todo.offDelete(this.updateProps);
    \t\t// remove from the DOM
    \t\tthis.remove();
    \t\t// remove other stuff
    \t\tthis.destructor();
    \t}
    &nbsp;
    \t// entry point to init the component
    \tpublic init(todo: Aventus.RamItem&lt;Todo&gt;) {
    \t\tthis.todo = todo;
    \t\tthis.updateProps(todo);

    \t\tthis.todo.onUpdate(this.updateProps);
    \t\tthis.todo.onDelete(this.destroy)
    \t}
    &nbsp;
    \tprotected updateStatus() {
    \t\t// change the status to the next one
    \t\tlet newStatus = (this.todo.status + 1) % 3;
    \t\t// update the todo inside the RAM
    \t\t// You must use the ram instead of modifying your object to keep the 2 list sync
    \t\tthis.todo.update({
    \t\t\tstatus: newStatus
    \t\t});
    \t}
    &nbsp;
    \tprotected deleteTodo() {
    \t\t// delete the todo inside the RAM
    \t\t// You must use the ram instead of modifying your object to keep the 2 list sync
    \t\tthis.todo.delete();
    \t}
    \t//#endregion
    &nbsp;
    }
</av-code>