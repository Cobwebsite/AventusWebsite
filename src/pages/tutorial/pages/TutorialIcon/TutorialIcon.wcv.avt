<h1>Using Icon</h1>

<p>The Icon component offers several key benefits. Firstly, it automatically loads the necessary font files, simplifying
    the process of integrating icons. This eliminates the need for manual font setup, saving time and reducing the
    likelihood of configuration errors.</p>

<p>Secondly, the Icon component enhances the user experience by providing a seamless and intuitive interface. Users can
    effortlessly select and incorporate icons into their interactions with the application, thanks to the comprehensive
    list of available icons and icons type accessible through autocompletion. This feature improves usability and
    accessibility for
    users.</p>

<p>In summary, integrating the Icon component into our application streamlines the process of incorporating icons,
    enhances the user experience, and maintains a cohesive design aesthetic. This component provides a convenient and
    efficient solution for integrating icons, empowering us to create visually appealing and user-friendly applications
    without the hassle of manual setup.</p>

<h2>Code it</h2>
<h3>Logic</h3>

<p>First of all we need a to create a new component named <span class="cn">Icon : </span></p>
<ul>
    <li>
        Over the folder <span class="cn">components</span> you can right click and select <span class="cn">Aventus :
            Create...</span>.
    </li>
    <li>You can select <span class="cn">Component</span></li>
    <li>You can fill the input with <span class="cn">Icon</span></li>
    <li>You can select <span class="cn">Multiple</span></li>
</ul>

<p>We need two attributes:</p>
<ul>
    <li><span class="cn">icon</span> a list of available icons</li>
    <li><span class="cn">type</span> a list of types provided by google font (sharp, rounded or outlined)</li>
</ul>

<p>This time, the tag attribute must trigger a change event when its value is altered to refresh the icon displayed. We
    are going to use <span class="cn">Property</span> (<av-router-link state="/docs/wc/property">More
        info</av-router-link>).</p>

<p>You can set your cursor inside the region <span class="cn">props</span> and <span class="cn">right
        click > Aventus: Create property</span> or use the shortcut <span class="cn">ctrl + k ctrl + numpad2</span>.
    You can fill the input with <span class="cn">type</span>, select the type <span class="cn">Custom</span> and we need
    a callback. We will use the literal type in typescript to define the type of <span class="cn">type</span>.</p>

<av-code language="typescript" filename="Demo/src/components/Icon/Icon.wcl.avt">
    <pre>
        &nbsp;
        export class Icon extends Aventus.WebComponent implements Aventus.DefaultComponent {
            ...
            //#region props
            /**
            * The type of the icon
            */
            @Property((target: Icon) =&gt; {
                // trigger when the type value changed
            })
            public type: 'sharp' | 'rounded' | 'outlined' = 'outlined'; // default value is outlined
            &nbsp;
            //#endregion
            ...
        }
    </pre>
</av-code>

<p>You can perform the same operation for the <span class="cn">icon</span> property. Additionally, you have the option
    to utilize the <span class="cn">Custom</span>
    type, although it requires defining a comprehensive list of all Material Icons. To maintain code cleanliness,
    consider creating a new file called <span class="cn">IconType.lib.avt</span>.</p>


<av-code language="typescript" filename="Demo/src/components/Icon/IconType.lib.avt">
    <pre>
        /** IconType is the list of all icons from material icon. This file is generated by a script */
        export type IconType =
            '10k' | 
            '10mp' | 
            '11mp' | 
            '123' | 
            '12mp' | 
            '13mp' | 
            ...;
    </pre>
</av-code>

<p>You can import this type to use it for your property. In addition, we can define a callback to update the content of
    our icon component.</p>

<av-code language="typescript" filename="Demo/src/components/Icon/Icon.wcl.avt">
    <pre>
        import type { IconType } from "./IconType.lib.avt";
        &nbsp;
        export class Icon extends Aventus.WebComponent implements Aventus.DefaultComponent {
        &nbsp;
            //#region props
            /**
             * Icon from https://fonts.google.com/icons
             */
            @Property((target: Icon) =&gt; {
                // if the component is rendered
                &#105;f(target.isReady)
                    // we set the icon as shadowroot content
                    target.shadowRoot.innerHTML = target.icon;
            })
            public icon: IconType = "check_box_outline_blank";
            ...
        }
    </pre>
</av-code>

<p>Regarding the logic, a function to load the font once based on the type is currently absent. You can code it : </p>

<av-code language="typescript" filename="Demo/src/components/Icon/Icon.wcl.avt">
    <pre>

        export class Icon extends Aventus.WebComponent implements Aventus.DefaultComponent {
            ...
            //#region methods
            /**
             * Add link tag into document head to load the font based on the type
             */
            private async loadFont() {
                &#105;f(!this.type) return;
        &nbsp;
                let url = 'https://fonts.googleapis.com/icon?family=Material+Symbols+';
                url += this.type.charAt(0).toUpperCase() + this.type.slice(1);
                // check &#105;f the url exist inside head and create a link tag &#105;f not exist
                await Aventus.ResourceLoader.loadInHead({
                    type: "css",
                    url: url
                });
            }
            /**
             * Init the icon after rendering
             */
            private async init() {
                await this.loadFont();
                // set the icon as component content
                this.shadowRoot.innerHTML = this.icon;
            }
            protected override postCreation(): void {
                this.init();
            }
            //#endregion
        }
    </pre>
</av-code>

<p>The final step is to ensure that the function <span class="cn">loadFont</span> is triggered whenever the property
    <span class="cn">type</span>
    changes.
</p>

<av-code language="typescript" filename="Demo/src/components/Icon/Icon.wcl.avt">
    <pre>
        export class Icon extends Aventus.WebComponent implements Aventus.DefaultComponent {
            ...
            /**
            * The type of the icon
            */
            @Property((target: Icon) =&gt; {
                &#105;f(target.isReady)
                    target.loadFont();
            })
            public type: 'sharp' | 'rounded' | 'outlined' = 'outlined';
            ...
        }
    </pre>
</av-code>

<h3>View</h3>

<p>To prevent users from inputting content into our icon, we need to remove the <span class="cn">&lt;slot&gt;</span> tag
    inside <span class="cn">Icon.wcv.avt</span>.</p>
<av-code language="html" filename="Demo/src/components/Icon/Icon.wcv.avt">
    <pre>
        &lt;!-- No content to prevent input --&gt;
    </pre>
</av-code>

<h3>Style</h3>

<p>To ensure the correct styling for the icon, we can access the URL
    <a href="https://fonts.googleapis.com/icon?family=Material+Symbols+Outlined"
        target="_blank">https://fonts.googleapis.com/icon?family=Material+Symbols+Outlined</a> and examine the CSS
    content provided. We then
    apply this CSS content directly to the component using the <span class="cn">:host</span> selector.
</p>

<av-code language="css" filename="Demo/src/components/Icon/Icon.wcs.avt">
    <pre>
        /* Come from https://fonts.googleapis.com/icon?family=Material+Symbols+Outlined */
        :host {
            direction: ltr;
            display: inline-block;
            font-family: 'Material Symbols Outlined';
            -webkit-font-feature-settings: 'liga';
            font-size: 24px;
            -webkit-font-smoothing: antialiased;
            font-style: normal;
            font-weight: normal;
            letter-spacing: normal;
            line-height: 1;
            text-transform: none;
            white-space: nowrap;
            word-wrap: normal;
        }
    </pre>
</av-code>

<p>Now, depending on the value of the type property, we need to apply the appropriate font-family.</p>

<av-code language="css" filename="Demo/src/components/Icon/Icon.wcs.avt">
    <pre>
        ...
        &nbsp;
        :host([type="sharp"]) {
            font-family: 'Material Symbols Sharp';
        }
        &nbsp;
        :host([type="rounded"]) {
            font-family: 'Material Symbols Rounded';
        }
        &nbsp;
        :host([type="outlined"]) {
            font-family: 'Material Symbols Outlined';
        }
        &nbsp;
    </pre>
</av-code>

<h3>Result</h3>

<p>With the <span class="cn">Icon</span> component now created, we're ready to utilize it within <span
        class="cn">td-display-todo</span> to showcase a trash icon
    alongside the name of the todo. If everything is set up correctly, you should have autocomplete functionality
    available within the <span class="cn">icon property</span>.</p>

<av-code language="html" filename="Demo/src/components/TodoDisplay/TodoDisplay.wcv.avt">
    <pre>
        &lt;div class="title"&gt;
            &lt;span&gt;&#123;&#123; this.todo.name &#125;&#125;&lt;/span&gt;
            &lt;td-icon icon="delete" @press="removeTodo"&gt;&lt;/td-icon&gt;
        &lt;/div&gt;
        &lt;ul&gt;
            &#102;or(let task of this.todo.tasks) { 
                &lt;li&gt;&#123;&#123; task.description &#125;&#125;&lt;/li&gt;
            }
        &lt;/ul&gt;
    </pre>
</av-code>

<p>Next, we need to implement the function responsible for removing a todo from the RAM.</p>

<av-code language="typescript" filename="Demo/src/components/TodoDisplay/TodoDisplay.wcl.avt">
    <pre>
        &nbsp;
        export class TodoDisplay extends Aventus.WebComponent implements Aventus.DefaultComponent {
            ...
            /**
            * Remove the todo
            */
            protected async removeTodo() {
                await TodoRAM.getInstance().deleteById(this.todo_id);
            }
            ...
        }
    </pre>
</av-code>

<p>Lastly, we can apply additional styling to customize the appearance of the trash icon according to our preferences.
</p>

<av-code language="css" filename="Demo/src/components/TodoDisplay/TodoDisplay.wcs.avt">
    <pre>
        :host {
            .title {
                display: flex;
                align-items: center;
                td-icon {
                    color: red;
                    margin-left: 10px;
                    cursor: pointer;
                }
            }
        }
        &nbsp;
    </pre>
</av-code>


<p>The final result is the following : </p>

<av-tutorial-icon-editor-1></av-tutorial-icon-editor-1>