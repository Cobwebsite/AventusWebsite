<av-code language="html" filename="Demo/src/apps/MainApp/pages/TodoCreatePage/TodoCreatePage.wcv.avt">
    <pre>
        &lt;div class="card"&gt;
            &lt;td-input label="Todo name" @bind="this.todo.name"&gt;&lt;/td-input&gt;
            &lt;div&gt;\{{ this.todo.name }}&lt;/div&gt;
        &lt;/div&gt;
    </pre>
</av-code>
<av-code language="typescript" filename="Demo/src/components/Input/Input.wcl.avt">
    <pre>
        export class Input extends Aventus.WebComponent implements Aventus.DefaultComponent {
        &nbsp;
            //#region static
        &nbsp;
            //#endregion
        &nbsp;
        &nbsp;
            //#region props
            /**
             * Label \for the input
             */
            @Property()
            public label?: string;
        &nbsp;
            /**
             * Current value of the input
             */
            @Property((target: Input) =&gt; {
                // When something change the td-input value property, we must update the input element value
                target.inputEl.value = target.value;
            })
            public value: string = "";
            //#endregion
        &nbsp;
        &nbsp;
            //#region variables
            private _onChange: Aventus.Callback&lt;(value: string) =&gt; void&gt; = new Aventus.Callback();
            /**
             * A function trigger when the input value change
             * Only trigger when a manual input change the vaue
             */
            public get onChange(): Aventus.Callback&lt;(value: string) =&gt; void&gt; {
                return this._onChange;
            }
        &nbsp;
            /**
             * A reference to the input element
             */
            @ViewElement()
            protected inputEl!: HTMLInputElement;
            //#endregion
        &nbsp;
        &nbsp;
            //#region constructor
        &nbsp;
            //#endregion
        &nbsp;
        &nbsp;
            //#region methods
        &nbsp;
            /**
             * A function to emit refresh value and emit event when the value changed
             */
            protected updateValue() {
                this.value = this.inputEl.value;
                this.onChange.trigger([this.value]);
            }
            //#endregion
        &nbsp;
        }
    </pre>
</av-code>
<av-code language="css" filename="Demo/src/components/Input/Input.wcs.avt">
    <pre>
        :host {
            background-color: var(--color-surface-mixed-600);
            border-radius: 10px;
            display: flex;
            flex-direction: column;
            height: fit-content;
            overflow: hidden;
            width: 100%;
        &nbsp;
            label {
                background-color: var(--color-surface-mixed-500);
                padding: 5px 15px;
                width: 100%;
            }
        &nbsp;
            input {
                background-color: transparent;
                border: none;
                box-shadow: none;
                color: var(--font-color);
                height: 100%;
                margin: 0;
                outline: none;
                padding: 15px 25px;
                width: 100%;
            }
        }
        &nbsp;
    </pre>
</av-code>
<av-code language="html" filename="Demo/src/components/Input/Input.wcv.avt">
    <pre>
        &lt;label \for="input"&gt;\{{ this.label }}&lt;/label&gt;
        &lt;input id="input" type="text" @element="inputEl" @input="updateValue"&gt;
    </pre>
</av-code>
<slot></slot>