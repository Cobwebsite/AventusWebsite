<h1>Library - Tools</h1>
<p>Finally you can use the tools provided to help you.</p>

<h2>compareObject</h2>
<p>If you want compare if two objects contains the same informations you can use the function <span
        class="cn">Aventus.compareObject</span></p>

<av-code language="typescript" filename="Example.lib.avt">
    <pre>
        export function test() {
        &nbsp;
            const obj1 = {
                name:"John",
                todos: ["todo1", "todo2"]
            }
        &nbsp;
            const obj2 = {
                name:"John",
                todos: ["todo2", "todo1"]
            }
        &nbsp;
            const obj3 = {
                name:"John",
                todos: ["todo1", "todo3"]
            }
        &nbsp;
            console.log(Aventus.compareObject(obj1, obj2)); // true
            console.log(Aventus.compareObject(obj1, obj3)); // false
        &nbsp;
        }
    </pre>
</av-code>

<h2>getValueFromObject</h2>
<p>The <span class="cn">Aventus.getValueFromObject</span> function is particularly useful when you need to retrieve a
    value from a nested object
    structure in JavaScript. This function helps you access specific values within complex objects without needing to
    write extensive code for traversal and error handling.</p>

<av-code language="typescript" filename="Example.lib.avt">
    <pre>
        export function test() {
            &nbsp;
            const userProfile = {
                user: {
                    profile: {
                        address: {
                            city: 'New York'
                        }
                    }
                }
            };
            &nbsp;
            // Using getValueFromObject to retrieve the city value
            const city = Aventus.getValueFromObject('user.profile.address.city', userProfile);
            &nbsp;
            console.log(city); // Output: New York
            &nbsp;
        }
    </pre>
</av-code>

<h2>setValueToObject</h2>
<p>The <span class="cn">Aventus.setValueToObject</span> function is invaluable when you need to set a value within a
    nested object structure in
    JavaScript. This function streamlines the process of updating specific properties within complex objects without the
    need for extensive manual traversal and error handling.</p>

<av-code language="typescript" filename="Example.lib.avt">
    <pre>
        export function test() {
            &nbsp;
            let userProfile = {
                user: {
                    profile: {
                        address: {
                            city: 'New York'
                        }
                    }
                }
            };
            &nbsp;
            // Using setValueToObject to update the city value
            setValueToObject('user.profile.address.city', userProfile, 'Los Angeles');
            &nbsp;
        }
    </pre>
</av-code>

<h2>Json</h2>
<p>The Json utility class is useful when you need to serialize JavaScript class instances into JSON objects and
    deserialize JSON data into JavaScript class instances. This is particularly helpful when working with data transfer
    between client and server, storing data in databases, or communicating with external APIs.</p>

<av-code language="typescript" filename="Example.lib.avt">
    <pre>
        // Define the User class
        class User {
            private name?: string;
            private age?: number;
            &nbsp;
            public constructor(name?: string, age?: number) {
                this.name = name;
                this.age = age;
            }
        }
        &nbsp;
        // Create an instance of the User class
        const user = new User("John", 30);
        &nbsp;
        // Serialize the class instance to JSON
        const jsonUser = Aventus.Json.classToJson(user);
        &nbsp;
        // Deserialize JSON data into a new instance of the User class
        const newUser = new User();
        Aventus.Json.classFromJson(newUser, jsonUser);
        &nbsp;
        // Output the deserialized user
        console.log(newUser); // User { name: 'John', age: 30 }
    </pre>
</av-code>

<h2>Converter</h2>
<p>The <span class="cn">Aventus.Converter.transform</span> method is essential for converting data from one format to
    another, particularly useful when
    dealing with complex object structures. It's a versatile tool that simplifies the process of transforming data by
    providing a consistent interface for conversion operations.</p>
<p>Suppose you have an application that receives JSON data from an API and needs to convert it into JavaScript objects
    for further processing. In this case, you can utilize the Converter.transform method to perform the conversion
    seamlessly.</p>
<p>By default, the Converter will populate the class instances through the method <span class="cn">fromJSON</span> on
    your object or through the method <span class="cn">Json.classFromJson</span>.</p>

<av-doc-lib-tools-editor-1></av-doc-lib-tools-editor-1>

<h2>Mutex</h2>
<p>A Mutex (short for Mutual Exclusion) is a synchronization mechanism used in concurrent programming to control access
    to a shared resource, ensuring that only one thread or process can access the resource at a time. This prevents race
    conditions and ensures data consistency in multi-threaded or multi-process environments.</p>
<ol>
    <li>

        <u>Waiting for the Mutex (waitOne):</u>
        <ul>
            <li>The waitOne function allows a thread or process to wait for the mutex to become available.</li>
            <li>When a thread calls waitOne, it enters a blocked state until the mutex is released by another thread or
                process.</li>
            <li>If the mutex is currently locked, the waiting thread is queued, and subsequent threads will wait in line
                until it's their turn.</li>
        </ul>
    </li>
    <li>
        <u>Acquiring the Mutex (release):</u>
        <ul>
            <li>The release function allows a thread or process to acquire (lock) the mutex, granting exclusive access
                to the shared resource.</li>
            <li>Once the mutex is acquired, the thread can safely perform operations on the shared resource.</li>
            <li>After completing its task, the thread releases the mutex using the release function, allowing other
                waiting threads or processes to acquire it.</li>
        </ul>
    </li>
    <li>
        <u>Releasing the Mutex (releaseOnlyLast):</u>
        <ul>
            <li>The releaseOnlyLast function is a variation of release that releases the mutex but allows only the last
                function in the waiting list to acquire it.</li>
            <li>This function is useful in scenarios where you want to prioritize the most recent request for the mutex
                over older ones.</li>
        </ul>
    </li>
    <li>
        <u>Safe Execution within Mutex (safeRun, safeRunAsync, safeRunLast, safeRunLastAsync):</u>
        <ul>
            <li>These functions provide a convenient way to execute code safely within the mutex lock and release the
                lock afterward.</li>
            <li>safeRun and safeRunLast are used for synchronous code execution, while safeRunAsync and safeRunLastAsync
                are used for asynchronous code execution.</li>
            <li>They ensure that only one thread executes the provided callback function at a time, preventing
                concurrent access to the shared resource.</li>
            <li>After executing the callback function, the mutex is released to allow other waiting threads or processes
                to acquire it.</li>
        </ul>
    </li>
</ol>
<av-doc-lib-tools-editor-3></av-doc-lib-tools-editor-3>
<p>In this example:</p>
<ul>
    <li>Each thread waits for the mutex before updating the counter.</li>
    <li>Only one thread can acquire the mutex at a time, ensuring that counter updates are performed sequentially.</li>
    <li>Once a thread completes its task, it releases the mutex, allowing other threads to acquire it.</li>
</ul>

<h2>sleep</h2>
<p>If you need to wait a specific time of ms you can use the <span class="cn">Aventus.sleep</span> function.</p>
<av-code language="typescript" filename="Example.lib.avt">
    export class Example {
    &nbsp;
    \tpublic async test() {
    \t\tconsole.log(Date.now());
    \t\tawait Aventus.sleep(5000);
    \t\tconsole.log(Date.now());
    \t}
    &nbsp;
    }
</av-code>

<h2>UUID</h2>
<p>If you need a unique id you can use the <span class="cn">Aventus.uuidv4</span> function. More information about uuid
    <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier" target="_blank">here</a>.
</p>
<av-code language="typescript" filename="Example.lib.avt">
    export class Example {
    &nbsp;
    \tpublic test() {
    \t\tlet id = Aventus.uuidv4();
    \t}
    &nbsp;
    }
</av-code>

<h2>Error</h2>
<p>When you create function that can fail you can use the error strategy developed by Aventus. Instead of returning the
    function result, the result is wrapped inside an container named <span class="cn">GenericError</span>, <span
        class="cn">VoidWithError</span>, and <span class="cn">ResultWithError</span>. They are all
    useful tools for managing errors and results in your application. They provide a structured way to represent error
    conditions and action outcomes, helping you write more robust and maintainable code.</p>

<h3>GenericError</h3>
<p><span class="cn">Aventus.GenericError</span> is a generic error class that provides a structured way to represent
    errors in your application. It
    allows you to define an error code along with a message to describe the error. The error code can be of any type
    that extends either number or an enumeration (Enum). By extending GenericError, you can create specific error types
    tailored to different error scenarios in your application.</p>

<av-code language="typescript" filename="Example.lib.avt">
    <pre>
        // Define an enumeration for error codes
        export enum MyErrorCode {
            NotFound = 404,
            InvalidInput = 400,
            InternalServerError = 500
        }
        
        // Create a specific error class extending GenericError
        export class MyError extends GenericError&lt;MyErrorCode&gt; { }
    </pre>
</av-code>

<h3>VoidWithError</h3>
<p><span class="cn">Aventus.VoidWithError</span> represents the result of an action that may produce errors but does not
    return
    a specific result value. It encapsulates the outcome of the action along with any errors that occur during its
    execution. This class is useful when you want to handle the success or failure of an action without necessarily
    needing a result value.</p>

<av-code language="typescript" filename="Example.lib.avt">
    <pre>
        const validation = SomeValidation.validate(data);

        &#105;f (validation.success) {
            // Proceed with further operations
        } &#101;lse {
            // Handle validation errors
            console.error("Validation errors:", validation.errors);
        }
    </pre>
</av-code>

<h3>ResultWithError</h3>
<p><span class="cn">Aventus.ResultWithError</span> is similar to Aventus.VoidWithError, but it also includes a result
    value along with
    potential errors. It represents the outcome of an action that produces a specific result, such as the result of a
    function call or an operation. This class allows you to handle both the result of the action and any errors that may
    occur during its execution.</p>

<av-code language="typescript" filename="Example.lib.avt">
    <pre>
       const result = SomeOperation.execute();

        &#105;f (result.success) {
            // Handle successful result
            console.log("Result:", result.result);
        } &#101;lse {
            // Handle errors
            console.error("Error:", result.errors[0].message);
        }
    </pre>
</av-code>

<p>Below you can find an implementation example for a function that must transform a string in lowercase.</p>
<av-doc-lib-tools-editor-2></av-doc-lib-tools-editor-2>