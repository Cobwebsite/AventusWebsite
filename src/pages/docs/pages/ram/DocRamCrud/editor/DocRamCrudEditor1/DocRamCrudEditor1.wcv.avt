<av-code-editor name="Example RAM" @element="editorEl">
    <av-code language="json" filename="ExampleRAM/aventus.conf.avt">
        <pre>
            {
                "module": "ExampleRAM",
                "build": [
                    {
                        "name": "Main",
                        "src": [
                            "./src/*"
                        ]
                    }
                ]
            }
        </pre>
    </av-code>
    <av-code language="typescript" filename="ExampleRAM/src/Person.data.avt">
        <pre>
            export class Person extends Aventus.Data implements Aventus.IData {
                public id: number = 0;
                public firstname!: string;
                public lastname!: string;
            }
        </pre>
    </av-code>
    <av-code language="typescript" filename="ExampleRAM/src/Person.ram.avt">
        <pre>
            import { Person } from "./Person.data.avt";
            &nbsp;
            export class PersonRAM extends Aventus.Ram&lt;Person&gt; implements Aventus.IRam {
                &nbsp;
                /**
                * Create a singleton to store data
                */
                public static getInstance() {
                    return Aventus.Instance.get(PersonRAM);
                }
                &nbsp;
                /**
                * @inheritdoc
                */
                public override defineIndexKey(): keyof Person {
                    return 'id';
                }
                &nbsp;
                /**
                * @inheritdoc
                */
                protected override getTypeForData(objJson: Aventus.KeysObject&lt;Person&gt; | Person): new () => Person {
                    return Person;
                }
                &nbsp;
            }
        </pre>
    </av-code>
    <av-code language="typescript" filename="ExampleRAM/src/Test.lib.avt">
        <pre>
import { PersonRAM } from "./Person.ram.avt";
&nbsp;
/**
* Return a person
*/
export async function query() {
    const p1 = await PersonRAM.getInstance().get(1);
}
&nbsp;
/**
* Check if the get contains errors
*/
export async function queryWithError() {
    const { success, errors, result } = await PersonRAM.getInstance().getWithError(1);
    \if(success) {
        const p1 = result;
    }
    \else {
        \for(let error of errors) {
            console.log(error.code + " " + error.message);
        }
    }
}
        </pre>
    </av-code>
    <slot></slot>
</av-code-editor>